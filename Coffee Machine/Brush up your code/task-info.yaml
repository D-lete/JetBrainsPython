type: edu
custom_name: stage6
files:
- name: machine/coffee_machine.py
  visible: true
  text: |
    # Write your code here
    class CoffeeMachine:

        def __init__(self, water, milk, beans, cups, money):
            self.water = water
            self.milk = milk
            self.beans = beans
            self.cups = cups
            self.money = money

        def state(self):
            print("The coffee machine has: \n%s of water\n%s of milk\n%s of coffee beans" % (self.water, self.milk,
                                                                                             self.beans))
            print("%s of disposable cups\n%s of money" % (self.cups, self.money))

        def stock(self, water, milk, beans, cups):
            if self.water < water or self.milk < milk or self.beans < beans or self.cups < cups:
                return False
            else:
                return True

        def buy(self):
            drink = ""
            while drink != "1" or drink != "2" or drink != "3":
                print("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:")
                drink = input()
                # print(drink)
                if drink == "1":
                    if self.water < 250 or self.milk < 0 or self.beans < 16 or self.cups < 1:
                        print("Sorry, but the coffee machine does not have enough ingredients for your drink")
                    else:
                        self.water -= 250
                        self.beans -= 16
                        self.cups -= 1
                        self.money += 4
                    break
                if drink == "2":
                    if self.water < 350 or self.milk < 75 or self.beans < 20 or self.cups < 1:
                        print("Sorry, but the coffee machine does not have enough ingredients for your drink")
                    else:
                        self.water -= 350
                        self.milk -= 75
                        self.beans -= 20
                        self.cups -= 1
                        self.money += 7
                    break
                if drink == "3":
                    if self.water < 200 or self.milk < 100 or self.beans < 12 or self.cups < 1:
                        print("Sorry, but the coffee machine does not have enough ingredients for your drink")
                    else:
                        self.water -= 200
                        self.milk -= 100
                        self.beans -= 12
                        self.cups -= 1
                        self.money += 6
                    break
                if drink == "back":
                    break

        def fill(self):
            water = ""
            while not water.isdigit():
                print("Write how many ml of water do you want to add:")
                water = input()
            milk = ""
            while not milk.isdigit():
                print("Write how many ml of milk do you want to add:")
                milk = input()
            beans = ""
            while not beans.isdigit():
                print("Write how many grams of beans do you want to add:")
                beans = input()
            cups = ""
            while not cups.isdigit():
                print("Write how many disposable cups do you want to add:")
                cups = input()
            self.water += int(water)
            self.milk += int(milk)
            self.beans += int(beans)
            self.cups += int(cups)

        def take(self):
            print("I gave you %s" % self.money)
            self.money = 0

        def remaining(self):
            return self.state()


    act = ""
    coffee_machine = CoffeeMachine(400, 540, 120, 9, 550)
    while act != "exit":
        print()
        print("Write action (buy, fill, take, remaining, exit):")
        act = input()
        if act == "buy":
            coffee_machine.buy()
        elif act == "fill":
            coffee_machine.fill()
        elif act == "take":
            coffee_machine.take()
        elif act == "remaining":
            coffee_machine.remaining()
        elif act == "exit":
            break
        else:
            print("Command Unknown")
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/68/stages/371/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 26 Feb 2021 08:11:47 UTC
record: -1
